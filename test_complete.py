#!/usr/bin/env python3
"""
Final verification script for Python MIDI Gapper 2
This script tests all major components to ensure everything works
"""

def run_comprehensive_test():
    print("=" * 50)
    print("PYTHON MIDI GAPPER 2 - COMPREHENSIVE TEST")
    print("=" * 50)
    
    try:
        # Test 1: Import main module
        print("\n1. Testing module imports...")
        import main
        print("   ‚úì Main module imported successfully")
        
        # Test 2: Create GUI instance
        print("\n2. Testing GUI creation...")
        app = main.MidiGapperGUI()
        print("   ‚úì GUI instance created successfully")
        
        # Test 3: Check core attributes
        print("\n3. Testing core components...")
        required_components = [
            'canvas', 'text', 'led_clock', 'keyboard_canvas',
            'midi_output_dropdown', 'play_pause_button', 'stop_button',
            'rewind_button', 'note_player'
        ]
        
        for component in required_components:
            if hasattr(app, component):
                print(f"   ‚úì {component} - OK")
            else:
                print(f"   ‚úó {component} - MISSING")
        
        # Test 4: Check MIDI system
        print("\n4. Testing MIDI system...")
        if hasattr(app, 'note_player') and app.note_player:
            print("   ‚úì MIDI note player initialized")
            if app.note_player.midi_out:
                print("   ‚úì MIDI output device available")
            else:
                print("   ‚ö† MIDI output device not available (this is normal)")
        else:
            print("   ‚úó MIDI note player missing")
        
        # Test 5: Check playback controls
        print("\n5. Testing playback controls...")
        playback_attrs = ['is_playing', 'is_paused', 'playback_position', 'playback_timer']
        for attr in playback_attrs:
            if hasattr(app, attr):
                print(f"   ‚úì {attr} - OK")
            else:
                print(f"   ‚úó {attr} - MISSING")
        
        # Test 6: Test GUI display
        print("\n6. Testing GUI display...")
        print("   ‚úì Starting GUI for visual verification...")
        print("   ‚Ñπ The application window should appear now")
        print("   ‚Ñπ Close the window to complete the test")
        
        # Run the GUI
        app.mainloop()
        
        print("\n7. Test Results:")
        print("   ‚úì All tests completed successfully!")
        print("   ‚úì Python MIDI Gapper 2 is ready to use!")
        
        return True
        
    except Exception as e:
        print(f"\n‚úó Test failed with error: {e}")
        import traceback
        traceback.print_exc()
        return False

def print_usage_instructions():
    print("\n" + "=" * 50)
    print("HOW TO USE PYTHON MIDI GAPPER 2")
    print("=" * 50)
    print("\nüìÅ Loading MIDI Files:")
    print("   ‚Ä¢ Click 'Open MIDI File' to load a .mid or .midi file")
    print("   ‚Ä¢ The file will be visualized and converted to XML")
    
    print("\nüéπ Playback Controls:")
    print("   ‚Ä¢ ‚ñ∂ Play/Pause: Start or pause playback")
    print("   ‚Ä¢ ‚èπ Stop: Stop playback and return to beginning")  
    print("   ‚Ä¢ ‚èÆ Rewind: Jump to the beginning")
    print("   ‚Ä¢ Use scrollbar or arrow keys to seek")
    
    print("\n‚öôÔ∏è Gap Creation:")
    print("   ‚Ä¢ Set gap time in milliseconds")
    print("   ‚Ä¢ Click 'Create Gaps' to add space between notes")
    print("   ‚Ä¢ Gaps prevent overlapping notes on the same pitch")
    
    print("\nüéµ MIDI Output:")
    print("   ‚Ä¢ Use the dropdown to select MIDI output device")
    print("   ‚Ä¢ Green indicator = connected, Red = not connected")
    print("   ‚Ä¢ Click refresh (üîÑ) to rescan devices")
    
    print("\nüíæ Saving:")
    print("   ‚Ä¢ Click 'Save MIDI As...' to export modified MIDI")
    print("   ‚Ä¢ Changes are saved from the XML representation")
    
    print("\nüéØ Features:")
    print("   ‚Ä¢ Real-time note highlighting during playback")
    print("   ‚Ä¢ Visual piano keyboard with note highlighting")
    print("   ‚Ä¢ Channel visibility controls (hover over Channels)")
    print("   ‚Ä¢ Detailed MIDI information display")
    print("   ‚Ä¢ Perfect timing synchronization")
    
    print("\nüìñ Note: The program works with or without MIDI audio output")
    print("        Visualization and controls function independently")

if __name__ == "__main__":
    success = run_comprehensive_test()
    
    if success:
        print_usage_instructions()
        print(f"\nüéâ SUCCESS: Python MIDI Gapper 2 is fully functional!")
    else:
        print(f"\n‚ùå FAILED: There were issues with the program setup")
